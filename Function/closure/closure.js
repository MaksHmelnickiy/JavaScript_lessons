// В JavaScript у каждой выполняемой функции, блока кода и скрипта есть связанный с ними внутренний (скрытый) объект, называемый ⁡⁢⁣⁣лексическим окружением LexicalEnvironment⁡.

// Объект лексического окружения состоит ⁡⁣⁣⁢из двух частей⁡:
// ⁡⁣⁢⁣1.⁡ ⁡⁢⁣⁣Environment Record⁡⁡ – объект, в котором как свойства хранятся все локальные переменные (а также некоторая другая информация, такая как значение ⁡⁢⁣⁣this⁡).
// ⁡⁣⁢⁣2.⁡ ⁡⁢⁣⁣Ссылка на внешнее лексическое окружение⁡ – то есть то, которое соответствует коду снаружи (снаружи от текущих фигурных скобок)

// ⁡⁣⁣⁢Замыкание⁡ даёт вам доступ к ⁡⁢⁣⁢Scope⁡ (⁡⁣⁣⁢Область видимости⁡ (англ. scope)) внешней функции из внутренней функции. 
// В JavaScript ⁡⁢⁣⁣замыкания⁡ создаются каждый раз при создании функции, во время её создания.

// ​‌‍‌⁡⁢⁣⁣Замыкание⁡​ это области видимости в котором мы из одной функции возвращаем новую функцию. И новая функция будет замкнута на область видимости родительской.
function Counter() {
    let count = 0 ;
    return function () {  // Вот эта функция ⁡⁣⁣⁢замкнута на области видимости родителя⁡.
        count++
        return count
    }
}

// При запуске функции для неё автоматически создаётся ⁡⁣⁣⁢новое лексическое окружение⁡, для хранения ⁡⁢⁣⁣локальных переменных⁡ и ⁡⁢⁣⁣параметров вызова⁡.
let phrase = "Hello";
function say(name){
    console.log(`${name} + ${phrase}`)
}
say('Maks')

// Итак, в процессе вызова функции у нас есть ⁡⁣⁣⁢два лексических окружения⁡: ⁡⁢⁣⁣внутреннее⁡ (для вызываемой функции) и ⁡⁢⁣⁣внешнее⁡ (глобальное):
// ⁡⁣⁢⁣*⁡ Внутреннее лексическое окружение соответствует текущему выполнению ⁡⁢⁣⁣say⁡.
// ⁡⁣⁢⁣*⁡ В нём находится одна переменная ⁡⁢⁣⁣name⁡, ⁡⁣⁣⁢аргумент функции⁡. Мы вызываем⁡⁢⁣⁣ say("Maks")⁡, так что значение переменной ⁡⁣⁢⁣name равно "Maks"⁡.
// ⁡⁣⁢⁣*⁡ ⁡⁢⁣⁣Внешнее лексическое окружение⁡ – это глобальное лексическое окружение.
// ⁡⁣⁢⁣*⁡ В нём находятся переменная ⁡⁢⁣⁣phrase⁡ и ⁡⁢⁣⁣сама функция⁡.

// ​‌‍‌Когда код хочет получить ⁡⁣⁣⁢доступ к переменной⁡ ​– сначала происходит поиск во ⁡⁢⁣⁢внутреннем лексическом окружении⁡, 
// затем ⁡⁢⁣⁢во внешнем⁡⁡, затем в следующем и так далее, до глобального.