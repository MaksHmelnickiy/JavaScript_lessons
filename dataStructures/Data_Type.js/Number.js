// В JavaScript можно использовать букву ⁡⁢⁣⁣"e"⁡, чтобы укоротить запись числа. Она добавляется к числу и заменяет указанное количество нулей:

let billion = 7e9;
console.log(billion)

let ms = 1e-6; // шесть нулей, слева от 1 ,  0.000001; 1 микросекунда

// Одна из часто используемых операций при работе с числами – это округление.
// В JavaScript есть несколько встроенных функций для работы с округлением:

// ⁡⁢⁣⁣Math.floor⁡
// Округление в меньшую сторону: 3.1 становится 3, а -1.1 — -2.
// ⁡⁢⁣⁣Math.ceil⁡
// Округление в большую сторону: 3.1 становится 4, а -1.1 — -1.
// ⁡⁢⁣⁣Math.round⁡
// Округление до ближайшего целого: 3.1 становится 3, 3.6 — 4, а -1.1 — -1.
// ⁡⁢⁣⁣Math.trunc⁡ (не поддерживается в Internet Explorer)
// Производит удаление дробной части без округления: 3.1 становится 3, а -1.1 — -1.
let num = 1.23456;
console.log( Math.floor(num * 100) / 100 ); // 1.23456 -> 123.456 -> 123 -> 1.23 // Округляет до 2 цифры после запятой


// Метод ⁡⁢⁣⁣toFixed(n)⁡ округляет число до n знаков после запятой и возвращает строковое представление результата.
let num2 = 12.343132;
console.log( num2.toFixed(2)) // Резульатом будет ⁡⁣⁡⁣⁢⁣12.34


// ⁡⁢⁣⁣Infinity (и -Infinity)⁡⁡⁡⁡ — особенное численное значение, которое ведёт себя в точности как математическая бесконечность ∞.
// ⁡⁢⁣⁣NaN⁡ - специальное значение "⁡⁢⁣⁣не число⁡", которое обычно говорит о том, что была выполнена бессмысленная операция.

// ⁡⁢⁣⁣isNaN(value)⁡ преобразует значение в число и проверяет является ли оно NaN:
console.log('isNan', isNaN(NaN) ); // true
console.log('isNan', isNaN('string') ); // true

// Нужна ли нам эта функция? Разве не можем ли мы просто сравнить ⁡⁢⁣⁣=== NaN ⁡? 
// К сожалению, нет. Значение ⁡⁢⁣⁣NaN⁡ уникально тем, ⁡⁢⁣⁢что оно не является равным ни чему другому, даже самому себе⁡:
console.log(NaN === NaN); // false

// ⁡⁢⁣⁣isFinite(value)⁡ преобразует аргумент в число и возвращает true, если оно является обычным числом, т.е. не ⁡⁢⁣⁣NaN/Infinity/-Infinity⁡:

// Существует специальный метод ⁡⁢⁣⁣Object.is⁡, который сравнивает значения примерно как ===, но более надёжен в двух особых ситуациях:
// Работает с ⁡⁢⁣⁣NaN⁡: ⁡⁢⁣⁢Object.is(NaN, NaN) === true⁡, здесь он хорош.
// Значения ⁡⁣⁢⁣0⁡⁡ и ⁡⁣⁢⁣-0⁡⁡ разные: ⁡⁢⁣⁢Object.is(0, -0) === false⁡, это редко используется, но технически эти значения разные.
// Во всех других случаях ⁡⁢⁣⁣Object.is(a, b)⁡ идентичен ⁡⁢⁣⁢a === b⁡.

// ⁡⁢⁣⁣parseInt и parseFloat⁡. Они «читают» число из строки. Если в процессе чтения возникает ошибка, они возвращают полученное до ошибки число. 
// Функция ⁡⁢⁣⁣parseInt⁡ возвращает целое число, а ⁡⁢⁣⁣parseFloat⁡ возвращает число с плавающей точкой:⁡
console.log('parseInt', parseInt('100px') ); // 100
console.log('parseFloat', parseFloat('12.5em') ); // 12.5
console.log('parseInt', parseInt('12.3') ); // 12, вернётся только целая часть
console.log('parseFloat', parseFloat('12.3.4') ); // 12.3, произойдёт остановка чтения на второй точке
console.log('parseInt result NaN', parseInt('a123') ); // ⁡⁢⁣⁢NaN⁡, на первом символе происходит остановка чтения

// В JavaScript встроен объект ⁡⁢⁣⁣Math⁡, который содержит различные математические функции и константы.

// ⁡⁢⁣⁣Math.random()⁡ Возвращает псевдослучайное число в диапазоне от ⁡⁣⁢⁣0⁡ (включительно) до ⁡⁣⁢⁣1⁡ (но не включая ⁡⁣⁢⁣1⁡)
let mathRandom = Math.random()
let result = mathRandom * 100; // ⁡⁢⁣⁣Формула⁡ что бы получить целое число от ⁡⁣⁢⁣0⁡ до ⁡⁣⁢⁣99⁡
console.log('Math.random()',  Math.round(result) ) // Выводим и округляем случайное полученное число

// ⁡⁢⁣⁣Math.max(a, b, c...)⁡ / ⁡⁢⁣⁣Math.min(a, b, c...)⁡ Возвращает наибольшее/наименьшее число из перечисленных аргументов.
console.log('Math.max', Math.max(3, 5, -10, 0, 1) ); // 5
console.log('Math.min', Math.min(3,7,2)) // 2

// ⁡⁢⁣⁣Math.pow(n, power)⁡ Возвращает число ⁡⁢⁣⁣n⁡, возведённое в степень ⁡⁢⁣⁣power⁡
console.log('Math.pow', Math.pow(2, 3)) // 8 / Как двойка в третьей степени или ⁡⁢⁣⁢(2*2*2)⁡