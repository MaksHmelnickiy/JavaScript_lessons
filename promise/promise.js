// Promise – это специальный объект, который содержит своё состояние. 
// У Promise есть три состояния Вначале pending («ожидание»),  затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»).
// Объект Promise используется для отложенных и асинхронных вычислений.

// На promise можно навешивать колбэки двух типов:

// onFulfilled – срабатывают, когда promise в состоянии «выполнен успешно».
// onRejected – срабатывают, когда promise в состоянии «выполнен с ошибкой».

// Объект Promise создаётся при помощи ключевого слова new

// методы then() и catch() сами возвращают промис, их можно вызывать цепочкой, создавая соединения.

const promise1 = new Promise((resolve, reject) => { // resolve - выполнен успешно
    setTimeout(() => {
      resolve('foo');
    }, 300);

  });

const promise2 = new Promise((resolve, reject) => { // reject - выполнен с ошибкой
    setTimeout(() => {
      reject('Error:');
    }, 300);
  });
  
  promise1.then((value) => {
    console.log(value);

  });
  
  console.log(promise1);

// .catch 
// Для того, чтобы поставить обработчик только на ошибку, вместо .then(null, onRejected) можно написать .catch(onRejected) – это то же самое.

// Синхронный throw – то же самое, что reject
// Если в функции промиса происходит синхронный throw (или иная ошибка), то вызывается reject:

// Методы

// Promise.all(iterable)
// Ожидает исполнения всех промисов или отклонения любого из них.
// Возвращает промис, который исполнится после исполнения всех промисов в iterable. В случае, если любой из промисов будет отклонён, Promise.all будет также отклонён.

// Promise.allSettled(iterable)
// Ожидает завершения всех полученных промисов (как исполнения так и отклонения).
// Возвращает промис, который исполняется когда все полученные промисы завершены (исполнены или отклонены), содержащий массив результатов исполнения полученных промисов.

// Promise.race(iterable)
// Ожидает исполнения или отклонения любого из полученных промисов.
// Возвращает промис, который будет исполнен или отклонён с результатом исполнения первого исполненного или отклонённого промиса из .iterable.

// Promise.reject(reason)
// Возвращает промис, выполнен с ошибкой.

// Promise.resolve(value)
// Возвращает промис, выполнен успешно.