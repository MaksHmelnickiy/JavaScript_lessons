// У слова async один простой смысл: эта функция всегда возвращает промис. 
// Значения других типов оборачиваются в завершившийся успешно промис автоматически.

// В JavaScript асинхронность — основной инструмент, который обрабатывает запросы параллельно с загрузкой веб-страницы.


// При работе с async/await можно обходиться без promise.then/catch, иногда всё-таки приходится использовать эти методы (на верхнем уровне вложенности, например). 
// Также await отлично работает в сочетании с Promise.all, если необходимо выполнить несколько задач параллельно.

async function f() { // оборачивает его в Promise
    return 1;
}
console.log(f())  // result: Promise {<fulfilled>: 1}
f().then(console.log); // 1 

//ключевое слово – await, которое можно использовать только внутри async-функций.

const delay  = ms => {
    return new Promise(r => setTimeout(() => r(), ms))
}

const url = 'https://jsonplaceholder.typicode.com/todos'


