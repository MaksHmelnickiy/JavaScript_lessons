// В JavaScript у каждой выполняемой функции, блока кода и скрипта есть связанный с ними внутренний (скрытый) объект, называемый лексическим окружением LexicalEnvironment.

// Объект лексического окружения состоит из двух частей:

// Environment Record – объект, в котором как свойства хранятся все локальные переменные (а также некоторая другая информация, такая как значение this).


// Это комбинация функции и лексического окружения, в котором эта функция была определена. Другими словами, замыкание даёт вам доступ к Scope (Область видимости (англ. scope)) внешней функции из внутренней функции. 
// В JavaScript замыкания создаются каждый раз при создании функции, во время её создания.


// Замыкание это области видимости в котором мы из одной функции возвращаем новую функцию. И новая функция будет замкнута на область видимости родительской.
function Counter() {
    let count = 0 ;
    return function () {  // Вот эта функция замкнута на области видимости родителя.
        count++
        return count
    }
}
// и теперь мы можем создавать кучу разных счетчиков используя одну функцию  например  let counter = Counter()  и вторая let newCounter = Counter().
let counter = Counter()
console.log('counter', counter()) // 1
console.log('counter', counter()) // 2

let newCounter = Counter()
console.log('newCounter', newCounter()) // 1
console.log('newCounter', newCounter()) // 2
console.log('newCounter', newCounter()) // 3

